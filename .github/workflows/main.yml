name: Main-foodgram-vismar-workflow

on:
  push:

jobs:
  check_docker_changes:
    runs-on: ubuntu-latest
    outputs:
      code_changes: ${{ steps.check_code_changes.outputs.changes }}
      dockerfile_changes: ${{ steps.check_dockerfile_changes.outputs.changes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for code changes (Backend)
        id: check_code_changes
        run: |
          echo "::set-output name=changes::$(git diff HEAD^ HEAD -- backend/ | wc -l)"

      - name: Check for Dockerfile changes (Backend)
        id: check_dockerfile_changes
        run: |
          echo "::set-output name=changes::$(git diff HEAD^ HEAD -- backend/Dockerfile | wc -l)"


  backend_tests:
    runs-on: ubuntu-latest
    needs: check_docker_changes
    if: needs.check_docker_changes.outputs.code_changes == 'true' || needs.check_docker_changes.outputs.dockerfile_changes == 'true'

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./backend/requirements.txt

      - name: Test with Flake8
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/

  build_and_push_images:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - check_docker_changes
      - backend_tests
    strategy:
      matrix:
        service:
          - backend
          - frontend
          - gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Image
        run: |
          case ${{ matrix.service }} in
            backend)
              if [ ${{ needs.check_docker_changes.outputs.code_changes }} == 'true' ] || [ ${{ needs.check_docker_changes.outputs.dockerfile_changes }} == 'true' ]; then
                docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest ./backend/
                docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
              fi
              ;;
            frontend)
              if [ ${{ needs.check_docker_changes.outputs.code_changes }} == 'true' ] || [ ${{ needs.check_docker_changes.outputs.dockerfile_changes }} == 'true' ]; then
                docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest ./frontend/
                docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
              fi
              ;;
            gateway)
              if [ ${{ needs.check_docker_changes.outputs.code_changes }} == 'true' ] || [ ${{ needs.check_docker_changes.outputs.dockerfile_changes }} == 'true' ]; then
                docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest ./nginx/
                docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest
              fi
              ;;
          esac

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build_and_push_images
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy docker-compose.production.yml via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: 'docker-compose.production.yml'
          target: 'foodgram'

      - name: Copy docs folder via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: 'docs'
          target: 'foodgram'

      - name: Project deploy and start
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml up -d

  send_message:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - name: Send Telegram Message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Деплой проекта foodgram-vismar был выполнен успешно.
            Ссылка на последний коммит: https://github.com/${{ github.repository }}/commit/${{github.sha}}
            Автор коммита: ${{ github.actor }}
            Сообщение коммита: ${{ github.event.commits[0].message }}
            {% if needs.check_docker_changes.outputs.code_changes == 'true' %}
            Изменения в коде:
            - Код: ${{ needs.check_docker_changes.outputs.code_changes }}
            {% endif %}
            {% if needs.check_docker_changes.outputs.dockerfile_changes == 'true' %}
            Изменения в Dockerfile:
            - Dockerfile: ${{ needs.check_docker_changes.outputs.dockerfile_changes }}
            {% endif %}